from PySide2 import QtPrintSupport
from PySide2 import QtCore, QtGui, QtWidgets
from PySide2.QtWidgets import QMainWindow, QLabel, QVBoxLayout, QAction
from PySide2.QtCore import QUrl
from PySide2.QtWebEngineWidgets import QWebEngineView
from shiboken2 import *

import toml
print('Toml OK')

from simpleeval import simple_eval
print('Eval OK')

import markdown2
print('Markdown2 OK')

#import jinja2
print('Jinja2 OK')

#import xhtml2pdf
print('Xhtml OK')

#from PyQt5 import QtWebEngineWidgets
print('PyQtWebEngine OK')

import sys
import os
import json






class MainWindow(QtWidgets.QMainWindow):

    def __init__(self):
        super().__init__()
        
        self.BASE_TITLE = 'FBS Tutorial Simplified'
        self.setWindowTitle(self.BASE_TITLE)
        self.REFRESH_DELAY_MS = 200
        self.modified = False
        self.refresh_timer = QtCore.QTimer()
        self.refresh_timer.setSingleShot(True)
        self.refresh_timer.setInterval(self.REFRESH_DELAY_MS)
        self.refresh_timer.timeout.connect(self.Refresh)

        self.settings = self.LoadSettings()
        
        self.init_fbs_minimal()
        #self.init_widgets()
        #self.init_layout()
        #self.init_mainmenu()
        
        self.css = ''#load_css()
        self.LoadResources()

        # print('Singles:',len(self.singles.keys()))
        # print('Macros:',len(self.macros.keys()))
        # print('Images:',len(self.images.keys()))

        try: self.LoadFileFromPath(self.settings['paths']['lastopened'])
        except KeyError: pass

        self.Refresh()


    def init_fbs_minimal(self):
        
        label1 = QLabel("QLabel 1")
        label2 = QLabel("QLabel 2")
        label3 = QLabel("QLabel 3")
        label4 = QLabel("QLabel 3")
        
        main_layout = QVBoxLayout()

        main_layout.addWidget(label1)
        main_layout.addWidget(label2)
        main_layout.addWidget(label3)
        main_layout.addWidget(label4)

        # main_layout.addWidget(grid_widget)
        main_layout.addStretch()

        centralWidget = QtWidgets.QWidget()
        centralWidget.setLayout(main_layout)
        self.setCentralWidget(centralWidget)



    # Load two tables and images
    def LoadResources(self):
        return
        self.singles = {}#read_csv(self.settings['paths'].get('table_products',None))
        self.subitems = {}#get_subitems(self.singles)
        self.macros = {}#read_csv_adv(self.settings['paths'].get('table_macros',None))
        self.images = {}#get_images(self.settings['paths'].get('img_folder',None))
        self.ConsoleLog('Database aggiornato.')

    
    def ScheduleRefresh(self):
        # print('Refresh timer started for 100 ms')
        self.modified = True
        self.UpdateTitle()
        self.refresh_timer.start()


    def init_widgets(self):
        self.texteditor = QtWidgets.QPlainTextEdit()
        #self.texteditor = QCodeEditor()
        # self.texteditor.setPlainText(self.settings['texteditor'])
        self.texteditor.zoomIn(self.settings['zoom_texteditor'])
        self.texteditor.textChanged.connect(self.ScheduleRefresh)

        self.e = QtWidgets.QPlainTextEdit()
        self.console.setReadOnly(True)
        self.console.zoomIn(self.settings['zoom_console'])


    def init_mainmenu(self):
        menubar = self.menuBar()
        filemenu = menubar.addMenu('File')
        # viewmenu = menubar.addMenu('Visualizza')
        
        items_filemenu = [
            ['Nuovo file', 'Ctrl+N', self.NewFile],
            ['Apri...', 'Ctrl+O', self.ChooseFile],
            ['Salva', 'Ctrl+S', self.Save],
            ['Salva con nome...', 'Ctrl+Shift+S', self.SaveAs],
            [],
            ['Esporta PDF (preventivo)', 'Ctrl+E', self.RenderPDF_estimate],
            ['Esporta PDF (proforma)', 'Ctrl+T', self.RenderPDF_proforma],
            [],
            ['Aggiorna anteprima', 'Ctrl+R', self.Refresh],
            ['Aggiorna database', 'Ctrl+L',     self.LoadResources],
            ['Impostazioni...', 'Ctrl+I',          self.OpenSettingsDialog],
            [],
            ['Chiudi', 'Ctrl+Shift+Q',          self.close],
        ]

        for data in items_filemenu:
            if len(data)>0:
                label,shortcut,function = data
                # label,shortcut,function = item
                new_action = QAction(label,self)
                new_action.setShortcut(shortcut)
                new_action.triggered.connect(function)
                filemenu.addAction(new_action)
            else:
                filemenu.addSeparator()


    def Dummy(self):
        return


    def ConfirmClose(self):
        # print('ConfirmClose')
        if self.modified:
            dialog = QMessageBox()
            # dialog.setIcon(QMessageBox.Question)
            dialog.setWindowTitle('Modifiche non salvate')
            dialog.setInformativeText(u"Abbandonare le modifiche in corso?")
            dialog.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            choice = dialog.exec_()
            return choice == QMessageBox.Ok
        return True


    def ChooseFile(self):
        if self.ConfirmClose():
            chosen_path = QtWidgets.QFileDialog.getOpenFileName(self, 'Apri file', '', '*.toml',)
            if chosen_path[0] != '':
                self.settings['paths']['lastopened'] = chosen_path[0]
                self.LoadFileFromPath(chosen_path[0])
                self.modified = False
                self.UpdateTitle()


    def LoadFileFromPath(self,path):
        if os.path.exists(path):
            with open(path, 'r+') as file:
                self.texteditor.setPlainText(file.read())
            self.modified = False
            self.UpdateTitle()


    def NewFile(self):
        if self.ConfirmClose():
            self.modified = False
            self.settings['paths']['lastopened'] = ''
            self.setWindowTitle(self.BASE_TITLE+' - senza titolo')
            self.texteditor.setPlainText('')
            self.Refresh()
            self.DisplayHTML('')
            self.ConsoleLog('Nuovo file creato.')


    def Save(self):
        path = self.settings['paths']['lastopened']
        if os.path.exists(path):
            try:
                with open(path,'w+') as file:
                    file.write(self.texteditor.toPlainText())
                self.ConsoleLog('File salvato:\n'+path)
                self.modified = False
                self.UpdateTitle()
            except Exception as e:
                self.ConsoleLog(e)


    def SaveAs(self):

        path,_ = QtWidgets.QFileDialog().getSaveFileName(self, "Salva file", '', "Toml (*.toml)")
        # print(type(savepath),savepath)
        if path != '':
            try:
                with open(path,'w+') as file:
                    file.write(self.texteditor.toPlainText())
                self.settings['paths']['lastopened'] = path
                self.modified = False
                self.ConsoleLog('File salvato:\n'+path)
                self.UpdateTitle()

            except Exception as e:
                print(str(e))
                self.ConsoleLog(str(e))


    def UpdateTitle(self):
        path = self.settings['paths']['lastopened']
        new_title = '{} - {}'.format(self.BASE_TITLE,path)
        if self.modified:
            new_title += ' (modificato)'
        self.setWindowTitle(new_title)


    def init_layout(self):
        self.setWindowTitle(self.BASE_TITLE)

        self.layout_left_splitter = QSplitter()
        self.layout_left_splitter.setOrientation(Qt.Vertical)
        self.layout_left_splitter.addWidget(self.texteditor)
        self.layout_left_splitter.addWidget(self.console)

        self.layout_panes = QSplitter()
        self.layout_panes.addWidget(self.layout_left_splitter)
        #self.layout_panes.addWidget(self.browser)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.layout_panes)

        # Set size for left splitter
        for settings_key,splitter in [
            ['left_splitter_sizes', self.layout_left_splitter],
            ['splitter_sizes',      self.layout_panes],
        ]:
            splitter_size = self.settings.get(settings_key)
            if splitter_size is not None:
                splitter.setSizes(splitter_size)

        # Set size for main splitter
        # splitter_sizes = self.settings.get('splitter_sizes')
        # if splitter_sizes is not None:
        #     self.layout_panes.setSizes(splitter_sizes)

        centralWidget = QtWidgets.QWidget()
        centralWidget.setLayout(layout)
        self.setCentralWidget(centralWidget)

        self.setGeometry(*self.settings['geometry'])


    def RenderHTML(self, **kwargs):
        return ''


    def RenderPDF(self, **kwargs):
        return


    def RenderPDF_estimate(self):
        self.RenderPDF(preview=False,render_estimate=True)

        
    def RenderPDF_proforma(self):
        self.RenderPDF(preview=False,render_proforma=True)


    def DisplayHTML(self, html):
        return


    def Refresh(self):
        # print('Refresh')
        try:
            html = self.RenderHTML(preview=True, render_estimate=True)
            self.DisplayHTML(html)
            self.ConsoleLog('OK')
        except Exception as e:
            print(e)
            self.ConsoleLog(str(e))


    def ConsoleLog(self,msg):
        print(msg)
        

    def LoadSettings(self):
        default_settings = {
            'geometry': [500,300,1400,1000],
            # 'texteditor': '',
            'splitter_sizes': None,
            'left_splitter_sizes': None,
            'browserzoomfactor': 1,
            'paths': {
                'lastopened': '',
            },
            'zoom_texteditor': 2,
            'zoom_console': 2,
        }

        return default_settings


    def SaveSettings(self):
        return


    def OpenSettingsDialog(self):
        return


    def closeEvent(self,event):
        print('closeEvent')
        if self.ConfirmClose():
            event.ignore()
            self.SaveSettings()
            print('Closing program (settings saved)')
            event.accept()
        else:
            event.ignore()






def main_pymarkup():
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.resize(250, 150)
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main_pymarkup()